{"version":3,"sources":["../src/context.tsx","../src/utils.ts","../src/index.ts"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react'\nimport type { FontConfig, FontContextType, FontManagerConfig } from './types'\n\nconst FontContext = createContext<FontContextType | undefined>(undefined)\n\nexport interface FontProviderProps {\n  children: React.ReactNode;\n  config: FontManagerConfig;\n}\n\nexport function FontProvider({ children, config }: FontProviderProps) {\n  const [currentFont, setCurrentFont] = useState<string>(config.defaultFont || Object.keys(config.fonts)[0])\n  const [fonts, setFonts] = useState<Record<string, FontConfig>>({})\n  const [mounted, setMounted] = useState(false)\n\n  useEffect(() => {\n    const loadFonts = async () => {\n      const loadedFonts: Record<string, FontConfig> = {}\n\n      for (const [name, definition] of Object.entries(config.fonts)) {\n        const fontInstance = await definition.font(definition.options)\n        loadedFonts[name] = fontInstance as FontConfig\n      }\n\n      setFonts(loadedFonts)\n      setMounted(true)\n    }\n\n    loadFonts()\n  }, [config.fonts])\n\n  useEffect(() => {\n    if (mounted) {\n      const savedFont = localStorage.getItem('font')\n      if (savedFont && savedFont in fonts) {\n        setCurrentFont(savedFont)\n      }\n    }\n  }, [mounted, fonts])\n\n  useEffect(() => {\n    if (mounted && fonts[currentFont]) {\n      document.documentElement.style.setProperty(\n        '--font-primary',\n        fonts[currentFont].style.fontFamily\n      )\n      localStorage.setItem('font', currentFont)\n    }\n  }, [currentFont, mounted, fonts])\n\n  const getFontClassName = () => {\n    return Object.values(fonts)\n      .map((font) => font.className)\n      .join(' ')\n  }\n\n  return (\n    <FontContext.Provider\n      value={{\n        currentFont,\n        setFont: setCurrentFont,\n        fonts,\n        getFontClassName\n      }}\n    >\n      {children}\n    </FontContext.Provider>\n  )\n}\n\nexport const useFont = () => {\n  const context = useContext(FontContext)\n  if (!context) {\n    throw new Error('useFont must be used within a FontProvider')\n  }\n  return context\n}\n","import type { FontConfig, FontManagerConfig } from './types'\n\nexport const generateCssVariables = (fonts: Record<string, FontConfig>) => {\n  return Object.entries(fonts).reduce((acc, [name, font]) => {\n    acc[`--font-${name}`] = font.style.fontFamily\n    return acc\n  }, {} as Record<string, string>)\n}\n\nexport const createFontManager = (config: FontManagerConfig) => {\n  return {\n    config,\n    getDefaultFont: () => config.defaultFont || Object.keys(config.fonts)[0],\n    getFontList: () => Object.keys(config.fonts),\n  }\n}\n","export * from './types'\nexport * from './context'\nexport * from './utils'\n\nexport { Inter, Roboto, Lora, Poppins, JetBrains_Mono } from 'next/font/google'\n"],"mappings":";AAAA,OAAO,SAAS,eAAe,YAAY,WAAW,gBAAgB;AAGtE,IAAM,cAAc,cAA2C,MAAS;AAOjE,SAAS,aAAa,EAAE,UAAU,OAAO,GAAsB;AACpE,QAAM,CAAC,aAAa,cAAc,IAAI,SAAiB,OAAO,eAAe,OAAO,KAAK,OAAO,KAAK,EAAE,CAAC,CAAC;AACzG,QAAM,CAAC,OAAO,QAAQ,IAAI,SAAqC,CAAC,CAAC;AACjE,QAAM,CAAC,SAAS,UAAU,IAAI,SAAS,KAAK;AAE5C,YAAU,MAAM;AACd,UAAM,YAAY,YAAY;AAC5B,YAAM,cAA0C,CAAC;AAEjD,iBAAW,CAAC,MAAM,UAAU,KAAK,OAAO,QAAQ,OAAO,KAAK,GAAG;AAC7D,cAAM,eAAe,MAAM,WAAW,KAAK,WAAW,OAAO;AAC7D,oBAAY,IAAI,IAAI;AAAA,MACtB;AAEA,eAAS,WAAW;AACpB,iBAAW,IAAI;AAAA,IACjB;AAEA,cAAU;AAAA,EACZ,GAAG,CAAC,OAAO,KAAK,CAAC;AAEjB,YAAU,MAAM;AACd,QAAI,SAAS;AACX,YAAM,YAAY,aAAa,QAAQ,MAAM;AAC7C,UAAI,aAAa,aAAa,OAAO;AACnC,uBAAe,SAAS;AAAA,MAC1B;AAAA,IACF;AAAA,EACF,GAAG,CAAC,SAAS,KAAK,CAAC;AAEnB,YAAU,MAAM;AACd,QAAI,WAAW,MAAM,WAAW,GAAG;AACjC,eAAS,gBAAgB,MAAM;AAAA,QAC7B;AAAA,QACA,MAAM,WAAW,EAAE,MAAM;AAAA,MAC3B;AACA,mBAAa,QAAQ,QAAQ,WAAW;AAAA,IAC1C;AAAA,EACF,GAAG,CAAC,aAAa,SAAS,KAAK,CAAC;AAEhC,QAAM,mBAAmB,MAAM;AAC7B,WAAO,OAAO,OAAO,KAAK,EACvB,IAAI,CAAC,SAAS,KAAK,SAAS,EAC5B,KAAK,GAAG;AAAA,EACb;AAEA,SACE;AAAA,IAAC,YAAY;AAAA,IAAZ;AAAA,MACC,OAAO;AAAA,QACL;AAAA,QACA,SAAS;AAAA,QACT;AAAA,QACA;AAAA,MACF;AAAA;AAAA,IAEC;AAAA,EACH;AAEJ;AAEO,IAAM,UAAU,MAAM;AAC3B,QAAM,UAAU,WAAW,WAAW;AACtC,MAAI,CAAC,SAAS;AACZ,UAAM,IAAI,MAAM,4CAA4C;AAAA,EAC9D;AACA,SAAO;AACT;;;AC1EO,IAAM,uBAAuB,CAAC,UAAsC;AACzE,SAAO,OAAO,QAAQ,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC,MAAM,IAAI,MAAM;AACzD,QAAI,UAAU,IAAI,EAAE,IAAI,KAAK,MAAM;AACnC,WAAO;AAAA,EACT,GAAG,CAAC,CAA2B;AACjC;AAEO,IAAM,oBAAoB,CAAC,WAA8B;AAC9D,SAAO;AAAA,IACL;AAAA,IACA,gBAAgB,MAAM,OAAO,eAAe,OAAO,KAAK,OAAO,KAAK,EAAE,CAAC;AAAA,IACvE,aAAa,MAAM,OAAO,KAAK,OAAO,KAAK;AAAA,EAC7C;AACF;;;ACXA,SAAS,OAAO,QAAQ,MAAM,SAAS,sBAAsB;","names":[]}