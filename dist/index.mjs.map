{"version":3,"sources":["../src/context.tsx","../src/utils.ts"],"sourcesContent":["\"use client\"\n\nimport * as React from 'react'\nimport type { FontManagerConfig, LoadedFont } from './types'\n\nconst FontContext = React.createContext<{\n  currentFont: string;\n  setFont: (font: string) => void;\n  fonts: Record<string, LoadedFont>;\n  getFontClassName: () => string;\n} | undefined>(undefined)\n\nexport interface FontProviderProps {\n  children: React.ReactNode;\n  config: FontManagerConfig;\n}\n\nexport function FontProvider({ children, config }: FontProviderProps) {\n  const [currentFont, setCurrentFont] = React.useState<string>(\n    config.defaultFont || Object.keys(config.fonts)[0]\n  )\n\n  React.useEffect(() => {\n    const savedFont = localStorage.getItem('font')\n    if (savedFont && savedFont in config.fonts) {\n      setCurrentFont(savedFont)\n    }\n  }, [config.fonts])\n\n  React.useEffect(() => {\n    document.documentElement.style.setProperty(\n      '--font-primary',\n      config.fonts[currentFont].font.style.fontFamily\n    )\n    localStorage.setItem('font', currentFont)\n  }, [currentFont, config.fonts])\n\n  const getFontClassName = () => {\n    return Object.values(config.fonts)\n      .map((fontData) => fontData.font.className)\n      .join(' ')\n  }\n\n  return (\n    <FontContext.Provider value={{\n      currentFont,\n      setFont: setCurrentFont,\n      fonts: config.fonts,\n      getFontClassName,\n    }}>\n      {children}\n    </FontContext.Provider>\n  )\n}\n\nexport const useFont = () => {\n  const context = React.useContext(FontContext)\n  if (!context) {\n    throw new Error('useFont must be used within a FontProvider')\n  }\n  return context\n}\n","import type { FontConfig, FontManagerConfig } from './types'\n\nexport const generateCssVariables = (fonts: Record<string, FontConfig>) => {\n  return Object.entries(fonts).reduce((acc, [name, font]) => {\n    acc[`--font-${name}`] = font.style.fontFamily\n    return acc\n  }, {} as Record<string, string>)\n}\n\nexport const createFontManager = (config: FontManagerConfig) => {\n  return {\n    config,\n    getDefaultFont: () => config.defaultFont || Object.keys(config.fonts)[0],\n    getFontList: () => Object.keys(config.fonts),\n  }\n}\n"],"mappings":";AAEA,YAAY,WAAW;AAGvB,IAAM,cAAoB,oBAKX,MAAS;AAOjB,SAAS,aAAa,EAAE,UAAU,OAAO,GAAsB;AACpE,QAAM,CAAC,aAAa,cAAc,IAAU;AAAA,IAC1C,OAAO,eAAe,OAAO,KAAK,OAAO,KAAK,EAAE,CAAC;AAAA,EACnD;AAEA,EAAM,gBAAU,MAAM;AACpB,UAAM,YAAY,aAAa,QAAQ,MAAM;AAC7C,QAAI,aAAa,aAAa,OAAO,OAAO;AAC1C,qBAAe,SAAS;AAAA,IAC1B;AAAA,EACF,GAAG,CAAC,OAAO,KAAK,CAAC;AAEjB,EAAM,gBAAU,MAAM;AACpB,aAAS,gBAAgB,MAAM;AAAA,MAC7B;AAAA,MACA,OAAO,MAAM,WAAW,EAAE,KAAK,MAAM;AAAA,IACvC;AACA,iBAAa,QAAQ,QAAQ,WAAW;AAAA,EAC1C,GAAG,CAAC,aAAa,OAAO,KAAK,CAAC;AAE9B,QAAM,mBAAmB,MAAM;AAC7B,WAAO,OAAO,OAAO,OAAO,KAAK,EAC9B,IAAI,CAAC,aAAa,SAAS,KAAK,SAAS,EACzC,KAAK,GAAG;AAAA,EACb;AAEA,SACE,oCAAC,YAAY,UAAZ,EAAqB,OAAO;AAAA,IAC3B;AAAA,IACA,SAAS;AAAA,IACT,OAAO,OAAO;AAAA,IACd;AAAA,EACF,KACG,QACH;AAEJ;AAEO,IAAM,UAAU,MAAM;AAC3B,QAAM,UAAgB,iBAAW,WAAW;AAC5C,MAAI,CAAC,SAAS;AACZ,UAAM,IAAI,MAAM,4CAA4C;AAAA,EAC9D;AACA,SAAO;AACT;;;AC3DO,IAAM,uBAAuB,CAAC,UAAsC;AACzE,SAAO,OAAO,QAAQ,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC,MAAM,IAAI,MAAM;AACzD,QAAI,UAAU,IAAI,EAAE,IAAI,KAAK,MAAM;AACnC,WAAO;AAAA,EACT,GAAG,CAAC,CAA2B;AACjC;AAEO,IAAM,oBAAoB,CAAC,WAA8B;AAC9D,SAAO;AAAA,IACL;AAAA,IACA,gBAAgB,MAAM,OAAO,eAAe,OAAO,KAAK,OAAO,KAAK,EAAE,CAAC;AAAA,IACvE,aAAa,MAAM,OAAO,KAAK,OAAO,KAAK;AAAA,EAC7C;AACF;","names":[]}