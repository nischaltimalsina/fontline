{"version":3,"sources":["../src/context.tsx","../src/script.ts"],"sourcesContent":["\"use client\"\n\nimport * as React from 'react'\nimport type { FontConfig, FontProviderProps, UseFontProps, FontValues } from './types'\nimport { getFontScript } from './script'\n\nconst FontContext = React.createContext<UseFontProps | undefined>(undefined)\n\nconst getInitialFont = (storageKey: string, defaultFont: string): string => {\n  if (typeof window === 'undefined') return defaultFont\n  try {\n    const stored = localStorage.getItem(storageKey)\n    return stored ?? defaultFont\n  } catch (e) {\n    return defaultFont\n  }\n}\nconst defaultContext: UseFontProps = {\n  setFont: () => {},\n  fonts: [],\n  font: \"\",\n  resolvedFont: \"\",\n}\n\nexport const useFont = () => React.useContext(FontContext) ?? defaultContext\n\nconst Font = ({\n  forcedFont,\n  disableTransitionOnChange = false,\n  storageKey = 'font',\n  fonts,\n  defaultFont,\n  values,\n  children,\n  nonce,\n}: FontProviderProps) => {\n  const [font, setFont] = React.useState(() => getInitialFont(storageKey, defaultFont))\n\n  const applyFont = React.useCallback((fontName: string) => {\n    if (!fontName || !fonts[fontName]) return\n\n    const enable = disableTransitionOnChange ? disableAnimation(nonce) : null\n    const d = document.documentElement\n\n    // Remove all previous font classes\n    Object.keys(fonts).forEach(name => {\n      const className = values?.[name] || fonts[name].className\n      d.classList.remove(className)\n    })\n\n    const className = values?.[fontName] || fonts[fontName].className\n    d.classList.add(className)\n    d.style.setProperty('--font-primary', fonts[fontName].style.fontFamily)\n\n    enable?.()\n  }, [fonts, values, nonce, disableTransitionOnChange])\n\n  // Use effect to save to localStorage\n  React.useEffect(() => {\n    if (font) {\n      try {\n        localStorage.setItem(storageKey, font)\n      } catch (e) {\n        // Unsupported\n      }\n    }\n  }, [font, storageKey])\n\n  // localStorage event handling\n  React.useEffect(() => {\n    const handleStorage = (e: StorageEvent) => {\n      if (e.key !== storageKey) return\n      const newFont = e.newValue || defaultFont\n      setFont(newFont)\n    }\n\n    window.addEventListener('storage', handleStorage)\n    return () => window.removeEventListener('storage', handleStorage)\n  }, [storageKey, defaultFont])\n\n  // Apply font whenever it changes\n  React.useEffect(() => {\n    applyFont(forcedFont ?? font)\n  }, [forcedFont, font, applyFont])\n\n    const providerValue = React.useMemo<UseFontProps>(() => ({\n    font,\n    setFont,\n    forcedFont,\n    resolvedFont: forcedFont ?? font,\n    fonts: Object.keys(fonts)\n  }), [font, forcedFont, fonts])\n\n  return (\n    <FontContext.Provider value={providerValue}>\n      <FontScript\n        storageKey={storageKey}\n        defaultFont={defaultFont}\n        forcedFont={forcedFont}\n        fonts={fonts}\n        values={values}\n        nonce={nonce}\n      />\n      {children}\n    </FontContext.Provider>\n  )\n}\n\nconst FontScript = React.memo(({\n  storageKey,\n  defaultFont,\n  forcedFont,\n  fonts,\n  values,\n  nonce,\n}: {\n  storageKey: string;\n  defaultFont: string;\n  forcedFont?: string;\n  fonts: Record<string, FontConfig>;\n  values?: FontValues;\n  nonce?: string;\n}) => {\n  const scriptArgs = JSON.stringify({\n    storageKey,\n    defaultFont,\n    forcedFont,\n    fonts,\n    values,\n  })\n\n  return (\n    <script\n      nonce={nonce}\n      dangerouslySetInnerHTML={{\n        __html: `(${getFontScript()})(${scriptArgs})`\n      }}\n    />\n  )\n})\n\nconst disableAnimation = (nonce?: string) => {\n  const css = document.createElement('style')\n  if (nonce) css.setAttribute('nonce', nonce)\n  css.appendChild(\n    document.createTextNode(\n      `*,*::before,*::after{transition:none!important}`\n    )\n  )\n  document.head.appendChild(css)\n\n  return () => {\n    (() => window.getComputedStyle(document.body))()\n    setTimeout(() => {\n      document.head.removeChild(css)\n    }, 1)\n  }\n}\n\nexport const FontProvider = (props: FontProviderProps) => {\n  const context = React.useContext(FontContext)\n  if (context) return <>{props.children}</>\n  return <Font {...props} />\n}\n","import { FontConfig, FontValueObject } from \"./types\"\n\nexport const script = (\n  storageKey: string,\n  defaultFont: string,\n  forcedFont: string | undefined,\n  fonts: Record<string, FontConfig>,\n  value: FontValueObject | undefined\n) => {\n  const el = document.documentElement\n\n  function updateDOM(font: string) {\n    const fontConfig = fonts[font]\n    if (!fontConfig) return\n\n    // Remove all previous font classes\n    Object.keys(fonts).forEach(name => {\n      const className = value?.[name] || fonts[name].className\n      el.classList.remove(className)\n    })\n\n    // Add new font class\n    const className = value?.[font] || fontConfig.className\n    el.classList.add(className)\n\n    // Update CSS custom property\n    el.style.setProperty('--font-primary', fontConfig.style.fontFamily)\n  }\n\n  if (forcedFont) {\n    updateDOM(forcedFont)\n  } else {\n    try {\n      const fontName = localStorage.getItem(storageKey) || defaultFont\n      updateDOM(fontName)\n    } catch (e) {\n      // Unsupported\n    }\n  }\n}\n\nexport const getFontScript = () => `\nfunction(config) {\n  const el = document.documentElement;\n\n  function updateDOM(fontName) {\n    if (!fontName || !config.fonts[fontName]) return;\n\n    // Remove previous font classes\n    Object.keys(config.fonts).forEach(name => {\n      const className = config.values?.[name] || config.fonts[name].className;\n      el.classList.remove(className);\n    });\n\n    // Add new font class\n    const className = config.values?.[fontName] || config.fonts[fontName].className;\n    el.classList.add(className);\n\n    // Update CSS custom property\n    el.style.setProperty('--font-primary', config.fonts[fontName].style.fontFamily);\n  }\n\n  if (config.forcedFont) {\n    updateDOM(config.forcedFont);\n  } else {\n    try {\n      const fontName = localStorage.getItem(config.storageKey) || config.defaultFont;\n      updateDOM(fontName);\n    } catch (e) {\n      updateDOM(config.defaultFont);\n    }\n  }\n}\n`\n"],"mappings":"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","names":["className","className"]}